<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-07-30T21:15:13+08:00</updated><id>http://localhost:4000/</id><title type="html">贝尔的记事本</title><subtitle>小码农的自耕田</subtitle><author><name>Bear</name></author><entry><title type="html">Windows消息映射机制</title><link href="http://localhost:4000/2017/07/17/Windows%E6%B6%88%E6%81%AF%E6%98%A0%E5%B0%84%E6%9C%BA%E5%88%B6/" rel="alternate" type="text/html" title="Windows消息映射机制" /><published>2017-07-17T00:00:00+08:00</published><updated>2017-07-17T00:00:00+08:00</updated><id>http://localhost:4000/2017/07/17/Windows%E6%B6%88%E6%81%AF%E6%98%A0%E5%B0%84%E6%9C%BA%E5%88%B6</id><content type="html" xml:base="http://localhost:4000/2017/07/17/Windows%E6%B6%88%E6%81%AF%E6%98%A0%E5%B0%84%E6%9C%BA%E5%88%B6/">&lt;h3 id=&quot;0x00简介&quot;&gt;0x00简介&lt;/h3&gt;

&lt;p&gt;windows应用程序都是消息驱动，其中MFC，其界面操作或者线程间通信是通过处理消息实现相应的操作，如用户在操作窗口时会产生消息，将其送给窗口的消息处理函数，对用户的操作做出对应的响应。&lt;/p&gt;

&lt;h3 id=&quot;0x01-消息&quot;&gt;0x01 消息&lt;/h3&gt;

&lt;p&gt;MFC的窗口消息含三个部分：&lt;/p&gt;

&lt;p&gt;1.消息值（一个无符号整数，经常被定义为宏）&lt;/p&gt;

&lt;p&gt;2.消息附带的WPARAM类型的参数&lt;/p&gt;

&lt;p&gt;3.消息附带的LPARAM类型的参数&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;windows消息种类&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1_标准Windows消息，均是以WM_开头的消息，需要注意的是WM_COMMAND不属于该类型。&lt;/p&gt;

&lt;p&gt;2_命令消息，消息名为WM_COMMAND，消息中附带标识符ID来区分是来自哪个菜单、工具栏按钮或加速键的消息。&lt;/p&gt;

&lt;p&gt;3_通知消息，通知消息一般由列表框等子窗口发送给父窗口，消息名也是WM_COMMAND，其中附带了控件通知码来区分控件。&lt;/p&gt;

&lt;h3 id=&quot;0x02-消息映射机制&quot;&gt;0x02 消息映射机制&lt;/h3&gt;

&lt;p&gt;一个消息与消息处理函数一一对应的消息映射表，以及消息处理函数的生命和实现等代码。具体来讲，当窗口接收到消息时，会到消息映射表中查找该消息对应的消息处理函数，然后又消息处理函数进行对应的处理。&lt;/p&gt;

&lt;h3 id=&quot;0x03消息映射表&quot;&gt;0x03消息映射表&lt;/h3&gt;

&lt;p&gt;在BEGIN_MESSAGE_MAP（）和END_MESSAGE_MAP（）之间的内容成为消息映射入口项。除了在含CMainFrame的实现文件中添加消息映射表外，在类的定义文件MainFrm.h中会添加DECLARE_MESSAGE_MAP（)，其一般来说会写在类定义的结尾位置。&lt;/p&gt;

&lt;h3 id=&quot;0x04消息处理函数的添加&quot;&gt;！！！0x04消息处理函数的添加&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1_在类定义中加入消息处理函数的声明，注意要以afx_msg打头。&lt;/td&gt;
      &lt;td&gt;    /&lt;em&gt;在MainFrm.h文件中添加 WM_CREATE消息处理函数的声明&lt;/em&gt;/&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;                                                                                                                    &lt;/td&gt;
      &lt;td&gt;    afx_msg int OnCreate(LPCREATESTRUCT IpCreateStruct);&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2_在类的消息映射表中添加该消息的消息映射入口。                       &lt;/td&gt;
      &lt;td&gt;    /&lt;em&gt;WM_CREATE的消息映射入口&lt;/em&gt;/&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;                                                                                                                    &lt;/td&gt;
      &lt;td&gt;   ON_WM_CREATE();&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;3_在类的实现中添加消息处理函数的函数实现。                               &lt;/td&gt;
      &lt;td&gt;   /&lt;em&gt;在MainFrm.cpp中添加WM_CREATE的消息处理函数的实现&lt;/em&gt;/&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;                                                                                                                   &lt;/td&gt;
      &lt;td&gt;   int CMainFrame::OnCreate(LPCREATESTRUCT lpCreateStruct) {实现语句}&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>Bear</name></author><summary type="html">0x00简介</summary></entry></feed>